# Reads a file generated by PubMed and exports the relevant data to a csv file.

import re
import sys


PMID = "PMID"
TITLE = "TI"  # Note may need to remove "[]" surrounding title text if not English
TITLE2 = "TT"
AUTHOR = "AU"  # No comma
YEAR = "DP"
ABSTRACT = "AB"
ORIGINAL_ABSTRACT = "OAB"
LANGUAGE = "LA"
JOURNAL = "JT"
JOURNAL2 = "TA"
MESH = "MH"
PUBLICATION_TYPE = "PT"
COUNTRY = "PL"
ARTICLE_ID = "AID"


class PubmedEntry:
    def __init__(self):
        self.pmid = ""
        self.title = ""
        self.author_list = []
        self.year = ""
        self.abstract = ""
        self.language = ""
        self.journal = ""
        self.publication_types = []
        self.mesh_terms = []
        self.country = []
        self.doi = ""
        self.pubmed_str = ""

    def __repr__(self):
        return f"PubmedEntry: {self.pmid}, {self.title}, {self.year}"

    def __str__(self):
        return f"PubmedEntry:\npmid:{self.pmid},\ntitle:{self.title}\nauthor_list:{self.author_list}\nyear:{self.year}\nabstract:{self.abstract[:50]}\nlanguage:{self.language}"

    def __eq__(self, other):
        return self.pmid == other.pmid

    def __hash__(self):
        return int(self.pmid)

    def to_list(self):
        def esc_list(l):
            return ['"' + i + '"' for i in l]

        return esc_list(
            [
                self.pmid,
                self.title,
                self.year,
                ",".join(self.author_list),
                self.abstract,
                self.language,
                self.journal,
                ",".join(self.mesh_terms),
                ",".join(self.publication_types),
                ",".join(self.country),
                self.doi,
            ]
        )


def parse_file(f):
    lines = f.readlines()
    pes = []
    pe = None
    tag = None

    for line in lines:
        splits = line.split("-", 1)
        if len(splits) == 2 and splits[0][0] != " ":
            tag = splits[0].strip()
            content = splits[1].strip().replace('"', "'")
        else:
            content = line.strip().replace('"', "'")

        # print(f"tag:{tag}")
        # print(f"content:{content}\n")

        if tag == PMID:
            # Close the last PubmedEntry.
            if pe is not None:
                pes.append(pe)
            # Start a new PubmedEntry.
            pe = PubmedEntry()
            pe.pmid = content
        elif tag == TITLE:
            pe.title += " " + content
            pe.title = pe.title.strip()
        elif tag == AUTHOR:
            pe.author_list.append(content)
        elif tag == YEAR:
            year = re.findall(r"(19\d{2}|20\d{2})", content)
            if len(year) == 1:
                pe.year = year[0]
        elif tag == ABSTRACT or tag == ORIGINAL_ABSTRACT:
            pe.abstract += " " + content
            pe.abstract = pe.abstract.strip()
        elif tag == JOURNAL:
            pe.journal = content
        elif tag == LANGUAGE:
            pe.language = content
        elif tag == MESH:
            pe.mesh_terms.append(content)
        elif tag == PUBLICATION_TYPE:
            pe.publication_types.append(content)
        elif tag == COUNTRY:
            pe.country.append(content)
        elif tag == ARTICLE_ID:
            if "[doi]" in content:
                pe.doi = re.sub(r" \[doi\]", "", content)

        assert pe is not None
        pe.pubmed_str += line + "\n"

    # Close the last PubmedEntry.
    pes.append(pe)
    return pes


def write_csv(pes):
    with open("outputs/database-search-results/pubmed.csv", "w", encoding="utf-8") as f:
        f.write(
            ",".join(
                [
                    "pmid",
                    "title",
                    "year",
                    "authors",
                    "abstract",
                    "language",
                    "journal",
                    "mesh terms",
                    "publication types",
                    "country",
                    "doi",
                ]
            )
        )
        f.write("\n")
        f.writelines([",".join(p.to_list()) + "\n" for p in pes])


def parse_pubmed_files():
    entries = []
    for i in range(4):
        with open(f"database-search-results/PubMed/pubmed-caesareanT-set({i}).txt", "r") as f:
            entries += parse_file(f)
    return entries


def main():
    all_entries = parse_pubmed_files()
    pes = set(all_entries)

    print(f"Parsed {len(all_entries)} Pubmed Entries; {len(pes)} unique")
    write_csv(pes)


if __name__ == "__main__":
    sys.exit(main())
